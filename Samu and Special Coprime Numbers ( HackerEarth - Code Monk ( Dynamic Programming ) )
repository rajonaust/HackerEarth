/*
    Author : RAJON BARDHAN
    AUST CSE 27th Batch
    All my programming success are dedicated to my mom , dad , little sister madhobi , teachers , friends and love TANIA SULTANA RIMY

    Problem Name : Samu and Special Coprime Numbers ( HackerEarth - Code Monk ( Dynamic Programming ) )
    ALGORITHM : Dynamic Programming
*/

#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define memo(a,b) memset(a,b,sizeof(a))
#define INF 1e9
#define EPS 1e-8
#define PI 3.14159265358979323846

typedef long long ll ;
typedef unsigned long long ull ;

/* int dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* int dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* int dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* int dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction

vector <int> V ;
ll dp[20][20*9+10][20*9*9+10];

void init(ll number)
{
    V.clear();
    while( number!=0 )
    {
        V.pb(number%10);
        number/=10;
    }
}

ll answer(int pos,bool flag ,int digitSum,int digitSquareSum)
{
    if(pos==-1) return __gcd(digitSum,digitSquareSum) == 1 ;

    ll &ret = dp[pos][digitSum][digitSquareSum] ;
    if(flag==0&&ret!=-1) return ret ;
    ll ans = 0 ;

    int i = 0 , ending ;
    if(flag==0) ending = 9 ; else ending = V[pos] ;

    for(i=0;i<=ending;i++) ans=ans+answer(pos-1,flag&&i==ending,digitSum+i,digitSquareSum+i*i);

    if(flag==0) ret = ans ;
    return ans ;
}

ll solve(ll number)
{
    init(number);
    return answer(V.size()-1,1,0,0) ;
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    memo(dp,-1);
    int T ;
    scanf("%d",&T);
    while( T-- )
    {
        ll L , R ;
        scanf("%lld%lld",&L,&R);
        printf("%lld\n",solve(R)-solve(L-1));
    }
    return 0;
}
